generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String                   @id @default(cuid())
  name                String?
  email               String?                  @unique
  password            String?
  active              Boolean                  @default(true)
  emailVerified       DateTime?                @map("email_verified")
  image               String?
  accounts            Account[]
  sessions            Session[]
  orders              Order[]
  adresses            Address[]
  favoriteRestaurants UserFavoriteRestaurant[]
  restaurants         Restaurant[]
  role                Role                     @default(USER)
  access_token        String?                  @db.Text

  @@map("users")
}

enum Role {
  USER
  RESTAURANT
  ADMIN
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Restaurant {
  id                  String                   @id @default(uuid())
  name                String
  slug                String                   @unique
  imageUrl            String
  deliveryFee         Decimal                  @db.Decimal(10, 2)
  deliveryTimeMinutes Int
  description         String                   @default("Lorem ipsum dolor sit amet consectetur adipisicing elit. Harum, unde iusto mollitia non aliquam praesentium. Ut saepe quod dolorum ullam delectus blanditiis nesciunt iusto, voluptates ex magnam porro iste debitis harum nam tenetur eum quas unde quo? Amet a quos vitae optio doloremque sequi ea est quae, esse rem enim?")
  categories          Category[]
  products            Product[]
  orders              Order[]
  usersWhoFavorited   UserFavoriteRestaurant[]
  User                User?                    @relation(fields: [userId], references: [id])
  userId              String?
}

model UserFavoriteRestaurant {
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())

  @@id([userId, restaurantId])
}

model Category {
  id          String       @id @default(uuid())
  name        String
  imageUrl    String
  restaurants Restaurant[]
  products    Product[]
  createdAt   DateTime     @default(now())
}

model Product {
  id                 String         @id @default(uuid())
  name               String
  description        String
  imageUrl           String
  price              Decimal        @db.Decimal(10, 2)
  discountPercentage Int            @default(0)
  restaurantId       String
  restaurant         Restaurant     @relation(fields: [restaurantId], references: [id])
  categoryId         String
  category           Category       @relation(fields: [categoryId], references: [id])
  createdAt          DateTime       @default(now())
  orderProducts      OrderProduct[]
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Order {
  id                  String         @id @default(uuid())
  userId              String
  user                User           @relation(fields: [userId], references: [id])
  products            OrderProduct[]
  restaurant          Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId        String
  deliveryFee         Decimal        @db.Decimal(10, 2)
  deliveryTimeMinutes Int
  subtotalPrice       Decimal        @db.Decimal(10, 2)
  totalPrice          Decimal        @db.Decimal(10, 2)
  totalDiscounts      Decimal        @db.Decimal(10, 2)
  createdAt           DateTime       @default(now())
  status              String         @default("CONFIRMED")
  address             Address?       @relation(fields: [addressId], references: [id])
  addressId           String?
}

model Address {
  id           String  @id @default(uuid())
  cep          String
  street       String
  number       Int
  neighborhood String
  city         String
  state        String
  complement   String?
  user         User?   @relation(fields: [userId], references: [id])
  userId       String?
  order        Order[]
}
